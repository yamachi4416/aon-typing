@use 'sass:math';
@use './vars';

@mixin items {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  align-items: center;
  justify-content: center;
  max-width: 100%;
  padding: 3px;
  @content;
}

@mixin button {
  padding: 0 1.5em;
  font-size: 0.9em;
  line-height: 2;
  color: var(--button-fg);
  white-space: nowrap;
  text-decoration: none;
  appearance: none;
  background: var(--button-bg);
  border: 1px solid var(--color-9);
  border-radius: 10px;
  @content;

  &:disabled {
    color: var(--disabled-fg);
    border-color: var(--disabled-bg);
  }

  &:is(label):has(> :focus-visible) {
    outline: rgb(16 16 16) auto 0.6px;
    outline-offset: 1px;
  }

  &:is(button, input, select, label, a):not(:disabled) {
    cursor: pointer;

    &:hover {
      box-shadow: 1px 1px 1px var(--color-6);
    }

    &:focus-visible {
      outline: rgb(16 16 16) auto 0.6px;
      outline-offset: 1px;
    }

    &[selected],
    &[aria-checked='true'],
    &:has(> :checked) {
      color: var(--checked-fg);
      background: var(--checked-bg);
    }
  }
}

@mixin button-big {
  @include button {
    line-height: 2.5;
    @content;
  }
}

@mixin buttons {
  @include items {
    @content;
  }

  :where(button, input, select, label, a) {
    @include button;
  }

  :where(label) {
    position: relative;
  }

  :where(label > input),
  :where(label > select) {
    position: absolute;
    inset: 0;
    opacity: 0;
  }
}

@mixin buttons-big {
  @include buttons {
    line-height: 2.5;
    @content;
  }
}

@mixin buttons-tight {
  @include buttons {
    gap: 3px;
    padding: 3px 0;
    @content;
  }

  :where(button, a, label) {
    padding: 0 10px;
  }
}

@mixin table-tight {
  width: fit-content;
  margin: 0 auto;
  border-collapse: collapse;
  @content;

  th {
    padding: 2px 20px;
    font-weight: normal;
    text-align: left;
  }

  td {
    padding: 2px 20px;
    text-align: right;
  }

  thead {
    th {
      padding: 5px 10px;
      text-align: center;
      border-bottom: 1px solid var(--color-c);
    }
  }
}

@mixin paper {
  position: relative;
  display: flex;
  flex: 1;
  flex-direction: column;
  padding: 20px;
  color: var(--color-3);
  background: var(--background-90);
  border-radius: 20px;
  box-shadow: var(--shadow-color-md) 0 1px 3px 0;
  @content;

  & :where(h1, h2, h3) {
    color: var(--color-6);
  }

  & :where(p) {
    padding: 10px;
    line-height: 1.8;
  }
}

@mixin card {
  position: relative;
  z-index: 0;
  display: flex;
  justify-content: center;
  padding: 10px;
  break-inside: avoid;
  @content;

  &:hover {
    z-index: 1;
  }

  @include vars.media_s {
    padding: 5px 7px;
  }

  & > * {
    flex: 1;
  }

  @include vars.media_l {
    &:nth-of-type(3n + 1) {
      justify-content: flex-start;
    }

    &:nth-of-type(3n) {
      justify-content: flex-end;
    }
  }

  @include vars.media_m {
    &:nth-of-type(2n + 1) {
      justify-content: flex-start;
    }

    &:nth-of-type(2n) {
      justify-content: flex-end;
    }
  }
}

@mixin placeholder {
  z-index: 1;
  background: transparent;
  @content;

  & + label {
    position: absolute;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--color-a);
    white-space: nowrap;
    pointer-events: none;
  }

  &:not(:placeholder-shown) + label {
    display: none;
  }
}

@mixin row {
  display: flex;
  flex-wrap: wrap;
  padding: 0;
  margin: 0;
  list-style: none;
  @content;

  @for $i from 1 to 13 {
    & > .col-#{$i} {
      width: math.div(100%, 12) * $i;
    }

    & > .col-#{$i}-5 {
      width: math.div(100%, 12) * $i + math.div(100%, 24) -6px;
    }

    @include vars.media_s {
      & > .col-s-#{$i},
      & > .col-s-#{$i}[class^='col-'] {
        width: math.div(100%, 12) * $i;
        max-width: math.div(100%, 12) * $i;
      }

      & > .col-s-#{$i}-5,
      & > .col-s-#{$i}-5[class^='col-'] {
        width: math.div(100%, 12) * $i + math.div(100%, 24);
        max-width: math.div(100%, 12) * $i + math.div(100%, 24);
      }
    }

    @include vars.media_m {
      & > .col-m-#{$i},
      & > .col-m-#{$i}[class^='col-'] {
        width: math.div(100%, 12) * $i;
        max-width: math.div(100%, 12) * $i;
      }

      & > .col-m-#{$i}-5,
      & > .col-m-#{$i}-5[class^='col-'] {
        width: math.div(100%, 12) * $i + math.div(100%, 24);
        max-width: math.div(100%, 12) * $i + math.div(100%, 24);
      }
    }

    @include vars.media_sm {
      & > .col-sm-#{$i},
      & > .col-sm-#{$i}[class^='col-'] {
        width: math.div(100%, 12) * $i;
        max-width: math.div(100%, 12) * $i;
      }

      & > .col-sm-#{$i}-5,
      & > .col-sm-#{$i}-5[class^='col-'] {
        width: math.div(100%, 12) * $i + math.div(100%, 24);
        max-width: math.div(100%, 12) * $i + math.div(100%, 24);
      }
    }

    @include vars.media_ml {
      & > .col-ml-#{$i},
      & > .col-ml-#{$i}[class^='col-'] {
        width: math.div(100%, 12) * $i;
        max-width: math.div(100%, 12) * $i;
      }

      & > .col-ml-#{$i}-5,
      & > .col-ml-#{$i}-5[class^='col-'] {
        width: math.div(100%, 12) * $i + math.div(100%, 24);
        max-width: math.div(100%, 12) * $i + math.div(100%, 24);
      }
    }
  }
}

@mixin pageHeader {
  @content;

  & > :where(header) {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  & > :where(:not(header, footer)) {
    flex: 1;
  }

  & > :where(footer) {
    @include buttons {
      justify-content: flex-start;
      padding-top: 5px;
    }
  }
}

@mixin listCard {
  display: flex;
  flex-wrap: wrap;
  list-style-type: none;
  @content;

  & > :where(li) {
    @include card;

    & > :where(*) {
      @include paper {
        word-break: break-all;
        text-decoration: none;
      }
    }
  }
}
